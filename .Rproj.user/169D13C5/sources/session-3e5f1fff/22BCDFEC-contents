---
title: "Redesign"
execute: 
  echo: false
---

## Redesign

Redesigning the Original Graph

#### Creating a Dotplot

```{r,warning=FALSE,error=FALSE,message=FALSE}
library(lattice)
library(tidyverse) 
library(plotly)
```

From the Original Graph Percentages of Men and Women are stored in the Men and Women Vector respectively and then these two vector values are stored in the Matrix form by using cbind.

```{r}
Men <- c(10,23,50,5,12)
Women <- c(17,43,30,2,7) 
mat <- cbind(Men, Women) 
mat
```

```{r}
Type <- c("Strong feminist", "Feminist","Not a feminist",
          "Anti-feminist", "No opinion") 
Gender <- c("Men","Women")   
colnames(mat) <- Gender  
rownames(mat) <- Type 
mat
```

The below dotplot visualizes opinions about feminism based on gender, with points representing percentages in different categories.

```{r}
Feminism = dotplot(mat, groups = FALSE,
          layout = c(1, 2), aspect = .7,
     origin = 0,type = c("p","h"),  
     main = "Opinion about feminism?", 
     xlab = "Feminism based on Gender",  
     scales = list(x = list(tck = 0, alternating = FALSE)),  
     panel = function(...)     
       {     panel.fill(rgb(.9,.9,.9))   
       panel.grid(h = 0,v = -1,col = "white",lwd = 2) 
       panel.dotplot(col = rgb(0,.5,1),cex = 1.1,...)  
       } )
Feminism
```

Taking Mean of the provided data and displayed in the descending order based on type.

```{r}
Means <- rowMeans(mat) 
Means
```

```{r}
(OrderType <- order(-Means))
```

```{r}
cbind(mat,Means)[OrderType,]
```

Created a plot in the ascending order of Opinion.

```{r}
dotplot(mat[OrderType,],groups = FALSE,
layout = c(2,2),aspect = .9,  
type = c("p","l"),   
main = "Gender based opinion on Feminism", 
xlab = "Percentage of Opinion",   
scales = list(x = list(tck = 0, alternating =  FALSE)), 
panel = function(...){     panel.fill(rgb(.9,.9,.9))
  panel.grid(h = 0,v = -1,col = "white",lwd = 2)
  panel.dotplot(col = rgb(0,.6,1),cex = 1.1,...)  
  } )
```

#### Creating a Bar chart

created a dataframe

```{r}
data <- data.frame(   Men = c(10, 23, 50, 5, 12),
        Women = c(17, 43, 30, 2, 7),  
        row.names = c("Strong feminist", "Feminist", "Not a feminist", 
                      "Anti-feminist", "No opinion") ) 
print(data)
```

```{r} summary(data)}
```

```{r}

source("C:\\Users\\chpra\\OneDrive\\Documents\\MS\\STAT-515\\MidProject\\hw.R")
```

Below Barchart displays the Opinion about Feminism based on Gender

```{r}
data$Opinion <- row.names(data) 

library(tidyr) 
Feminismdata <- gather(data, Gender, Count, -Opinion)  

library(ggplot2)  
ggplot(Feminismdata, aes(x = Opinion, y = Count, fill = Gender)) +
  geom_bar(stat = "identity", position = "dodge") +  
  labs( x = "Type",  y = "Count",
       title = "Opinion about feminism based on Gender") +hw 
```

Below Graph is the Grouped bar charts representing the opinion based on Gender.

```{r}

ggplot(Feminismdata, aes(x = Gender, y = Count, fill = Opinion)) +  
  geom_bar(stat = "identity", position = "dodge") +  
  labs(x="Gender",y="Count", 
       title="Gender based Feminism", 
       fill="Types") + hw
```

In the below barchart when we hover on each bar we can see the details of each bar.

```{r}

plot_ly(Feminismdata, x = ~Gender, y = ~Count, color =  ~Opinion, type = "bar")
```

```{r}
categories <- c("Strong feminist", "Feminist", "Not a feminist",
                "Anti-feminist", "No opinion")  
men_percentages <- c(10, 23, 50, 5, 12) 
women_percentages <- c(17, 43, 30, 2, 7)
df <- data.frame(Category = categories, Men = men_percentages,                  Women = women_percentages)
ggplot(df, aes(x = Category)) +
  geom_bar(aes(y = Men, fill = "Men"), 
           stat = "identity", position = "dodge") +  
  geom_bar(aes(y = Women, fill = "Women"),   
           stat = "identity", position = "dodge") +
  labs(x = "Feminist Beliefs", y = "Percentage", 
       title = "Self-Identified Feminist Beliefs by Gender") + 
  scale_fill_manual(values = c("Men" = "blue", "Women" = "yellow")) +   theme_minimal() +  
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  guides(fill = guide_legend(title = 'Gender'))
```
